profiling of the script with kernprof, in order to optimize it on the server


processing:  processing: 100027  [  100055  [1 / 1  1 / ] 1  100.0000]   %
INFO: Created TensorFlow Lite XNNPACK delegate for CPU.
processing:  100066  [ 1 / 1 ] 100.0000 % 100.0000processing:   %
100068  [ 
1 / 1 ]  100.0000 %
processing:  100084  [ 1processing:   / 100111processing:  100111  [  [  1 /  1processing:  100193  1]  [ ]   /100.0000 %
 11 ]    100.0000 / 1100.0000 %
%
 ]  100.0000 %
durata:  3.513889789581299
Timer unit: 1e-07 s

Total time: 2.61867 s
File: C:/Users/carlu/Desktop/Progetto/BBGen/main.py
Function: mainTask at line 136

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   136                                           @profile
   137                                           def mainTask(videoList):
   138                                           
   139         1         27.0     27.0      0.0      resultDatasetPath='./jester'
   140                                           
   141         1         26.0     26.0      0.0      mp_hands = mediapipe.solutions.hands  # seleziona hand dalla libreria mediapipe SPOSTARE in schedule
   142         1         11.0     11.0      0.0      videoCnt=0
   143                                           
   144         2     230812.0 115406.0      0.9      with mp_hands.Hands(static_image_mode=False,
   145         1         12.0     12.0      0.0                          max_num_hands=1,
   146         1         10.0     10.0      0.0                          model_complexity=1,
   147         1         10.0     10.0      0.0                          min_detection_confidence=0.3,
   148         2         45.0     22.5      0.0                          min_tracking_confidence=0.4) as handDet:
   149         2     226707.0 113353.5      0.9          for videoPath in videoList:
   150         1         14.0     14.0      0.0              video=[]
   151         1         12.0     12.0      0.0              coordinates=[]   #boundng box coordinates for each frame of the video
   152         1         17.0     17.0      0.0              videoCnt+=1
   153         1     109304.0 109304.0      0.4              print('processing: ',videoPath,' [',videoCnt,'/',len(videoList),'] ','{:.4f}'.format(videoCnt/len(videoList)*100),'%')
   154         1        552.0    552.0      0.0              resultPath = os.path.join(resultDatasetPath,videoPath)
   155         1     157485.0 157485.0      0.6              if not os.path.exists(resultPath):
   156         1     176164.0 176164.0      0.7                  os.mkdir(resultPath)
   157                                                       else:
   158                                                           continue
   159         1        737.0    737.0      0.0              videoPath=os.path.join(datasetPath,videoPath)
   160         1    1050240.0 1050240.0      4.0              imgList=os.listdir(videoPath)
   161                                           
   162         1         89.0     89.0      0.0              maxw=0
   163         1        120.0    120.0      0.0              maxh=0
   164         1         57.0     57.0      0.0              frameCnt=0
   165        38       1352.0     35.6      0.0              for imgPath in imgList:       #per ogni video calcola le massime base e altezza
   166                                           
   167        37     459954.0  12431.2      1.8                  frame=cv2.imread(os.path.join(videoPath,imgPath))
   168                                           
   169        37       6357.0    171.8      0.0                  if frameCnt==0:
   170         1         77.0     77.0      0.0                      h, w, _ = frame.shape
   171                                           
   172        37       1748.0     47.2      0.0                  frameCnt += 1
   173                                           
   174        37       8756.0    236.6      0.0                  frame.flags.writeable=False
   175        37      16875.0    456.1      0.1                  frame=cv2.cvtColor(frame,cv2.COLOR_BGR2RGB)
   176                                           
   177        37   22302713.0 602776.0     85.2                  output=handDet.process(frame)
   178                                           
   179        37       2830.0     76.5      0.0                  if output.multi_hand_landmarks!=None:
   180                                                               #for detectedHand in output.hand_rects:
   181        74       4654.0     62.9      0.0                      for points in output.multi_hand_landmarks:
   182        37      24914.0    673.4      0.1                          points=[[p.x*w,p.y*h] for p in points.landmark]   #estrae tutti i ounti della mano
   183        37     105271.0   2845.2      0.4                          xmin,ymin,xmax,ymax=findBBfromPoints(points)       #calcola rettangolo che li contiene tutti
   184                                           
   185        37       1766.0     47.7      0.0                          video.append(frame)
   186        37       1164.0     31.5      0.0                          coordinates.append([xmin,ymin,xmax,ymax])
   187                                           
   188        37       2333.0     63.1      0.0                          if xmax-xmin>maxw:                          #calcola massime base e altezza per tutto il video
   189         1         19.0     19.0      0.0                              maxw=xmax-xmin
   190        37       1034.0     27.9      0.0                          if ymax-ymin>maxh:
   191         7        183.0     26.1      0.0                              maxh=ymax-ymin
   192                                           
   193         1        475.0    475.0      0.0              maxw=maxw*1.4           #applica margine del 40%
   194         1         94.0     94.0      0.0              maxh*=1.4
   195                                           
   196         1         18.0     18.0      0.0              imgIndex = 0
   197        38       8122.0    213.7      0.0              for i,frame in enumerate(video):
   198        37       2849.0     77.0      0.0                  xmin, ymin, xmax, ymax=coordinates[i]
   199        37     107041.0   2893.0      0.4                  newxmin, newymin, newxmax, newymax, bordersize = getMaxBB(xmin, ymin, xmax, ymax, maxw, maxh, w, h)
   200        74      50099.0    677.0      0.2                  frame = cv2.copyMakeBorder(
   201        37        817.0     22.1      0.0                      frame,
   202        37       1047.0     28.3      0.0                      top=bordersize,
   203        37        823.0     22.2      0.0                      bottom=bordersize,
   204        37        801.0     21.6      0.0                      left=bordersize,
   205        37        844.0     22.8      0.0                      right=bordersize,
   206        37       1001.0     27.1      0.0                      borderType=cv2.BORDER_CONSTANT,
   207        37        843.0     22.8      0.0                      value=[0, 0, 0]
   208                                                           )
   209        37       4273.0    115.5      0.0                  cropped = frame[newymin:newymax, newxmin:newxmax]
   210                                           
   211        37      70431.0   1903.5      0.3                  cropped = resizeSameRatio(cropped, 112, 112)
   212        37       1164.0     31.5      0.0                  imgIndex += 1
   213        37       4986.0    134.8      0.0                  imgName = '{:05d}.jpg'.format(imgIndex)
   214        37    1029734.0  27830.6      3.9                  cv2.imwrite(os.path.join(resultPath, imgName), cropped)
   215                                           
   216         1       6771.0   6771.0      0.0      cv2.destroyAllWindows()